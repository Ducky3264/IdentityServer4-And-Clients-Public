
@page "/About"
@model IDSAuthority.Pages.AboutModel
@{

}
<div>
    <p class="display-4">About my app</p>
    <p>
        <h3>What is it?</h3>
        My app, Keychain login system is an external, OIDC JWT Identity provider built on top of IdentityServer4. I am presenting this app along with an example client, which is what the end user sets up. An end user sets up an example client with the information on it that they want to protect with my authentication service, and then configures their app to connect to mine.
        <h3>Why is this useful?</h3>
        Data breeches are becoming more common and we continuously increase in the number of usernames and passwords we must have as the world becomes increasingly digital. Reviewing my own password store, I have over 75 logins. In the case of a data breech, I would have not only 75 accounts exposed, but would have to take the time to change the password to 75 different accounts. This could be remedied by my app, as any other website can connect to it and use it for not only login but identity. My app offers great convenience in only needing to remember one login, with two other uses.
        It can prevent data breeches and is very convenient in the case of one:
        If this were to become a fully-fledged company, security would be the highest priority at Keychain. If we had a company that was completely focused on managing and supporting a secure login system, the risk of a data breach would be next to none. Even in the case of a data breech, customers would only be required to change one value and be done.
        <h3>Why is this better than alternatives such as OAuth 2.0?</h3>
        OAuth 2.0 is strictly a delegation and authorization protocol, not an authentication protocol. It is commonly used as pseudo authentication, but this is the wrong way to go about things and leads to users having a confused array of data sets. OIDC, which is built on top of OAuth 2.0 allows for a full, external authentication flow. This means that all your personal info (ex. Email, address, username) is stored on the identity server, or Keychain.
        <h3>How does it work?</h3>
        To get into more technical details, the flow can be described like this. An anonymous user connects to a page on the client and can view anything that does not require authorization. If this anonymous user attempts to access a page that requires authorization, the web server running the client will initiate the flow by requesting the open id configuration document from the identity server. This tells the client the authorization type, and where to redirect the user. The user is now redirected to /connect/authorize on the identity server. /connect/authorize finds that the user is not authorized or authenticated and redirects them to the login page. From here the user can either sign up or enter their username and password. The user will enter their username and password, which is then checked against the salted and hashed database. If their info is correct, they will be issued a cookie with their identifying info and be referred to /connect/authorize. /connect/authorize will read this cookie, and issue them an authorization code (since we are using the more secure authorization code grant.) They are then transferred to /signin-oidc on the client, which will then read their authorization code and send it back to the Identity server, along with their ID. From here, the identity server will check it, and call the profile service. The profile service queries the database and returns the claims (email, name, address, etc.) requested by the client to the client, in the form of Json Web Token, or JWT. This is then applied to the user by /signin-oidc, and the flow in completed. No info is recorded by the client, and it knows everything it needs to know about the user. Because we are using the authorization code grant, user data is also only transferred once over the front channel when the user gives their info the identity server. All sensitive info will only be communicated server to server.
        <h3>Who would find this useful?</h3>
        Practically everything that can be online is online now, and almost every web page that is interacting with a customer needs some sort of login. Businesses that want to open a web page but are worried about security and the daunting task of building a login service will not have to do anything outside of a few lines of code. If this app were to become a fully-fledged product, businesses would be provided with a dashboard to setup and configure their Keychain server, and then would be provided with information or live support on how to configure their web page to connect to it. Servers would be automatically created by bots as docker containers. End users will also appreciate this, as they can sign in with their already existing Keychain account and have their info automatically transferred to this service.
        <h3>What did you use to make this?</h3>
        The app is currently deployed in the cloud on an AWS EC2 instance, and the database is running on a serverless Amazon RDS instance with MySQL. The code (which can be viewed <a href="">here</a>) is written in C# ASP.NET Core 3 razor pages, HTML5, CSS, JavaScript, and uses both entity framework core and Identityserver4. This app is cross platform, running on both windows and Linux.

    </p>
</div>